// Gestionnaire de l'API Claude
const ClaudeAPI = {
    async callAPI(prData, apiKey, jiraInfo = null) {
        const prompt = this.generateReviewPrompt(prData, jiraInfo);

        try {
            console.log('üîë Calling Claude API...');

            const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-API-Key': apiKey,
                    'anthropic-version': '2023-06-01',
                    'anthropic-dangerous-direct-browser-access': 'true'
                },
                body: JSON.stringify({
                    model: 'claude-3-haiku-20240307',
                    max_tokens: 2000,
                    temperature: 0.1,
                    messages: [{
                        role: 'user',
                        content: prompt
                    }]
                })
            });

            console.log('üì° Claude Response Status:', response.status);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå Claude API Error:', response.status, errorText);

                if (response.status === 401) {
                    throw new Error('Cl√© API Claude invalide. V√©rifiez votre configuration.');
                } else if (response.status === 429) {
                    throw new Error('Trop de requ√™tes. Attendez quelques minutes.');
                } else {
                    throw new Error(`Erreur Claude API: ${response.status} - ${errorText}`);
                }
            }

            const data = await response.json();
            console.log('‚úÖ Claude Response received');

            return data.content[0].text;

        } catch (error) {
            console.error('‚ùå Claude API Error:', error);
            throw error;
        }
    },

    generateReviewPrompt(prData, jiraInfo = null) {
        let jiraSection = '';

        if (jiraInfo && jiraInfo.ticket) {
            jiraSection = `
**Informations du ticket Jira ${jiraInfo.ticket}:**
- **Titre Jira:** ${jiraInfo.title || 'Non disponible'}
- **Description Jira:** ${jiraInfo.description || 'Non disponible'}
- **Statut:** ${jiraInfo.status || 'Non disponible'}
`;
        }

        return `Tu es un expert en review de code. Analyse cette pull request GitHub et signale UNIQUEMENT les probl√®mes concrets que tu identifies dans le code fourni.

**Pull Request: ${prData.title}**
${prData.description ? `**Description:** ${prData.description}` : '**Description:** Aucune description fournie'}

${jiraSection}

**Fichiers modifi√©s (${prData.files.length}/${prData.totalFiles}):**

${prData.files.map(file => `
### ${file.filename} (${file.status}, +${file.additions}/-${file.deletions})
\`\`\`${file.language}
${file.patch}
\`\`\`
`).join('\n')}

**INSTRUCTIONS IMPORTANTES:**
- Analyse UNIQUEMENT le code fourni ci-dessus
- Ne signale QUE les probl√®mes que tu peux VOIR concr√®tement dans le code
- N'invente AUCUN probl√®me, ne fais AUCUNE supposition
- Si tu ne vois pas de probl√®me dans une cat√©gorie, √©cris "Rien √† signaler"
- Sois tr√®s pr√©cis sur les num√©ros de ligne et noms de fichiers

**Checklist √† v√©rifier:**

**Pull Request:**
- Titre respecte le format : <gitmoji><espace>[INTL-1234]<espace>Titre en fran√ßais
- Description contient un lien Jira si applicable
- Description contient des instructions de d√©ploiement si n√©cessaire

**M√©nage:**
- Debug oubli√© : console.log, dd, dump, var_dump, print_r
- Commentaires TODO, FIXME oubli√©s
- Param√®tres de m√©thodes non utilis√©s (PHP, JS, Twig)
- Imports/require non utilis√©s

**Typage:**
- Types PHP manquants sur m√©thodes, param√®tres, retours
- Annotations manquantes pour array PHP et Collection<T>
- Types TypeScript manquants ou 'any'
- Propri√©t√©s PHP sans readonly quand appropri√©
- Contr√¥leurs Catalyst sans suffixe "Element"
- Visibilit√© manquante (private/protected/public)
- Variables nullable non test√©es avant utilisation

**Coh√©rence:**
- Noms de variables incoh√©rents
- Noms de classes/m√©thodes/fichiers non conformes
- Textes non traduits (strings hardcod√©es)
- Emplacements de fichiers inappropri√©s

**Coh√©rence avec le ticket:**
${jiraInfo && jiraInfo.ticket ? `
- Le code impl√©mente-t-il ce qui est d√©crit dans le ticket "${jiraInfo.title}" ?
- Les modifications correspondent-elles aux exigences du ticket Jira ?
- Y a-t-il des fonctionnalit√©s d√©velopp√©es qui ne sont pas mentionn√©es dans le ticket ?
- Le scope du d√©veloppement reste-t-il dans les limites du ticket ?
` : `
- V√©rifier si les modifications correspondent bien au titre de la PR
- S'assurer que le scope reste coh√©rent avec l'objectif annonc√©
`}

**Qualit√©:**
- Indentation incorrecte
- Fautes d'orthographe dans commentaires/noms
- Valeurs magiques sans constantes
- Variables interm√©diaires manquantes (calculs redondants)

**Tests:**
- Cas d'erreur non test√©s
- Fixtures manquantes ou incorrectes
- Tests unitaires manquants pour nouvelle logique
- Tests fonctionnels manquants

**Refactoring:**
- Code dupliqu√© identique
- M√©thodes trop longues (>20 lignes)
- Classes avec trop de responsabilit√©s

**FORMAT DE R√âPONSE OBLIGATOIRE:**

Pull Request:
[Probl√®mes du titre/description de la PR ou "Rien √† signaler"]

M√©nage:
[Probl√®mes de debug/TODO dans fichier:ligne ou "Rien √† signaler"]

Typage:
[Probl√®mes de types dans fichier:ligne ou "Rien √† signaler"]

Coh√©rence:
[Probl√®mes de nommage/traduction dans fichier:ligne ou "Rien √† signaler"]

Coh√©rence avec le ticket:
[Probl√®mes d'alignement avec les exigences du ticket ou "Rien √† signaler"]

Qualit√©:
[Probl√®mes de qualit√© dans fichier:ligne ou "Rien √† signaler"]

Tests:
[Probl√®mes de tests ou "Rien √† signaler"]

Refacto:
[Am√©liorations possibles dans fichier:ligne ou "Rien √† signaler"]

**RAPPEL:** Ne signale QUE ce que tu vois r√©ellement dans le code fourni. Pas de suppositions, pas d'inventions.`;
    }
};